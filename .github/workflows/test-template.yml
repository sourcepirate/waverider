name: Test Cookiecutter Template

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r test-requirements.txt
    
    - name: Run basic template validation
      run: |
        python validate_template.py
    
    - name: Run full test suite
      run: |
        python run_tests.py
    
    - name: Test cookiecutter generation
      run: |
        # Test actual cookiecutter generation
        cookiecutter . --no-input --output-dir /tmp/test-output
        
        # Verify generated project structure
        test -f /tmp/test-output/my_awesome_project/manage.py
        test -f /tmp/test-output/my_awesome_project/requirements/base.txt
        test -d /tmp/test-output/my_awesome_project/my_awesome_project/accounts
        test -d /tmp/test-output/my_awesome_project/my_awesome_project/accounts/api
        test -d /tmp/test-output/my_awesome_project/my_awesome_project/accounts/oauth2
        test -f /tmp/test-output/my_awesome_project/my_awesome_project/accounts/tests/test_api_package.py
    
    - name: Test generated project dependencies
      run: |
        cd /tmp/test-output/my_awesome_project
        python -m pip install -r requirements/base.txt
        python -m pip install -r requirements/local.txt
        
        # Test that Python files can be imported (basic syntax check)
        python -c "import my_awesome_project.settings.base"
        python -c "import my_awesome_project.accounts.api"
        python -c "import my_awesome_project.accounts.oauth2"
    
    - name: Run generated project tests
      run: |
        cd /tmp/test-output/my_awesome_project
        # Install Django and other dependencies
        python -m pip install -r requirements/local.txt
        
        # Set up environment
        export DJANGO_SETTINGS_MODULE=my_awesome_project.settings.local
        export SECRET_KEY=test-secret-key-for-ci
        
        # Run Django checks
        python manage.py check --deploy
        
        # Run tests
        python manage.py test accounts.tests.test_api_package --verbosity=2

  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install cookiecutter
      run: |
        pip install cookiecutter
    
    - name: Generate project
      run: |
        cookiecutter . --no-input --output-dir /tmp/test-output
    
    - name: Test Docker build
      run: |
        cd /tmp/test-output/my_awesome_project
        docker build -t test-django-app .
    
    - name: Test Docker compose
      run: |
        cd /tmp/test-output/my_awesome_project
        docker-compose -f docker-compose.yml config

  test-multiple-contexts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install cookiecutter
      run: |
        pip install cookiecutter
    
    - name: Test different project configurations
      run: |
        # Test with Docker disabled
        cookiecutter . --no-input --output-dir /tmp/test-no-docker \
          use_docker=n project_name="No Docker Project" project_slug="no_docker_project"
        
        # Test with different database settings
        cookiecutter . --no-input --output-dir /tmp/test-custom-db \
          project_name="Custom DB Project" project_slug="custom_db_project" \
          postgresql_user="customuser" postgresql_db="customdb"
        
        # Verify both projects were generated
        test -f /tmp/test-no-docker/no_docker_project/manage.py
        test -f /tmp/test-custom-db/custom_db_project/manage.py
