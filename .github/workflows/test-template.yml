name: Test Cookiecutter Template

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Run tox validation tests
      run: |
        make tox-validate
    
    - name: Run pytest tests with tox
      run: |
        tox -e py
    
    - name: Test cookiecutter generation
      run: |
        make test-gen

  test-comprehensive:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Run all tox tests
      run: |
        make tox-all
    
    - name: Test generated project structure
      run: |
        # Test actual cookiecutter generation with default context
        cookiecutter . --no-input --output-dir /tmp/test-output
        
        # Verify generated project structure
        PROJECT_DIR="/tmp/test-output/my_awesome_project"
        test -f "$PROJECT_DIR/manage.py"
        test -f "$PROJECT_DIR/requirements/base.txt"
        test -d "$PROJECT_DIR/my_awesome_project/accounts"
        test -d "$PROJECT_DIR/my_awesome_project/accounts/api"
        test -d "$PROJECT_DIR/my_awesome_project/accounts/oauth2"
        test -f "$PROJECT_DIR/my_awesome_project/accounts/tests/test_api_package.py"
        test -f "$PROJECT_DIR/my_awesome_project/accounts/api.py"
        echo "âœ“ All structure checks passed"

  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Generate project
      run: |
        cookiecutter . --no-input --output-dir /tmp/test-output
    
    - name: Test Docker build
      run: |
        cd /tmp/test-output/my_awesome_project
        docker build -t test-django-app .
    
    - name: Test Docker compose
      run: |
        cd /tmp/test-output/my_awesome_project
        docker-compose -f docker-compose.yml config

  test-lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Run tox linting
      run: |
        make tox-lint

  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
    
    - name: Run coverage tests
      run: |
        make tox-coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false
