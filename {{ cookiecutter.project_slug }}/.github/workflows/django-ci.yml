name: Django CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "master" ] # Adjust branch names if needed
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.11"] # Specify Python versions to test against

    # Service containers to run with the job
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Map TCP port 5432 on service container to TCP port 5432 on the runner host
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Map TCP port 6379 on service container to the runner host
          - 6379:6379

    # --- START JINJA RAW BLOCK ---
    {% raw %}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Install requirements needed for testing
        # Use local.txt as it includes testing libs, or create a dedicated test.txt
        pip install -r "{{ cookiecutter.project_slug }}/requirements/local.txt"

    - name: Run Tests with Pytest
      # Environment variables needed by the application during tests
      # Match the service container details defined above
      env:
        DJANGO_SETTINGS_MODULE: "{{ cookiecutter.project_slug }}.settings.local" # Use local settings for tests
        DATABASE_URL: "postgres://testuser:testpassword@localhost:5432/testdb" # Points to service container
        CELERY_BROKER_URL: "redis://localhost:6379/0" # Points to service container
        CELERY_RESULT_BACKEND: "redis://localhost:6379/1" # Points to service container
        CACHE_URL: "redis://localhost:6379/2" # Points to service container
        # Generate a dummy secret key for CI runs - DO NOT USE a real production key here
        DJANGO_SECRET_KEY: "dummy-secret-key-for-ci-${{ github.sha }}"
        # Ensure decouple reads env vars even without a .env file in CI
        PYTHONUNBUFFERED: 1
        # Add any other environment variables required by your settings/app during testing
      run: |
        cd "{{ cookiecutter.project_slug }}" # Navigate into the generated project directory
        pytest # Run pytest

    - name: Install Safety for Security Check
      run: |
        pip install safety

    - name: Check for Vulnerable Dependencies
      run: |
        # Check base dependencies (most critical for runtime)
        # You could also check local.txt or production.txt if preferred
        safety check -r "{{ cookiecutter.project_slug }}/requirements/base.txt" --full-report

    # Optional: Add steps for linting (e.g., flake8, black) here
    # - name: Lint with Flake8
    #   run: |
    #     pip install flake8
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # --- END JINJA RAW BLOCK ---
    {% endraw %} 