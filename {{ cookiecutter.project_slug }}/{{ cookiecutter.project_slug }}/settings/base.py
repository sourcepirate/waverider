"""
Django settings for {{ cookiecutter.project_name }} project.

Generated by 'django-admin startproject' using Django 5.x.
For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR points to the directory containing manage.py
BASE_DIR = Path(__file__).resolve().parent.parent.parent
# PROJECT_DIR points to the directory containing settings.py
PROJECT_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "{{ cookiecutter.django_secret_key }}"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG will be overridden in local.py and production.py
DEBUG = False

ALLOWED_HOSTS = [] # Should be configured in production.py


# Application definition

# Group apps for better organization
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'django_celery_beat',       # Celery Periodic Tasks Scheduler
    'django_celery_results',    # Celery Result Backend using Django ORM
    # 'ninja',                 # Django Ninja doesn't need to be in INSTALLED_APPS
    'rest_framework_simplejwt', # JWT Authentication
    'guardian',                 # Object-level Permissions
    'django_redis',             # Redis Cache Backend (needed if using it directly, not just via settings)
    'oauth2_provider',          # OAuth2 Provider (django-oauth-toolkit)
    'social_django',            # Social Authentication (social-auth-app-django)
]

LOCAL_APPS = [
    # Your project's apps go here.
    # Example: '{{ cookiecutter.project_slug }}.users',
    '{{ cookiecutter.project_slug }}.accounts', # Authentication app
]

# Combine the lists
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{{ cookiecutter.project_slug }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_DIR, 'templates')], # Optional: common templates dir
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ cookiecutter.project_slug }}.wsgi.application'
ASGI_APPLICATION = '{{ cookiecutter.project_slug }}.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# Database configuration will be handled in local.py and production.py
DATABASES = {}


# Authentication Backends
# Required by django-guardian
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # Default Django auth
    'guardian.backends.ObjectPermissionBackend', # Guardian object permission backend
)

# ANONYMOUS_USER_ID = -1 # Or None, depending on your anonymous user handling preference


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # For collectstatic
STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'static'), # Optional: common static files dir
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Celery Configuration Options
# https://docs.celeryq.dev/en/stable/userguide/configuration.html
CELERY_BROKER_URL = "{{ cookiecutter.celery_broker_url }}"
CELERY_RESULT_BACKEND = "{{ cookiecutter.celery_result_backend }}"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
# Use Django-Celery-Results as the result backend
CELERY_RESULT_EXTENDED = True
# Make Celery Beat use the Django database scheduler
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


# Django Ninja settings (usually not needed in settings.py, configuration is in urls.py)


# Email settings (configure in local.py/production.py)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Default for development

# Cache configuration
# https://docs.djangoproject.com/en/5.0/topics/cache/
# https://github.com/jazzband/django-redis
# Default to dummy cache, will be overridden using CACHE_URL in local/prod
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

# Simple JWT Settings
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Example: 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Example: 1 day
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True, # Recommended

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses Django SECRET_KEY by default
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Standard Bearer token prefix
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Not used unless SLIDING tokens enabled
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Not used unless SLIDING tokens enabled
}


# OAuth2 Settings
# Configure these in your environment-specific settings (local.py, production.py)
GOOGLE_OAUTH2_CLIENT_ID = os.getenv("GOOGLE_OAUTH2_CLIENT_ID", None)
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH2_CLIENT_SECRET", None)

GITHUB_OAUTH2_CLIENT_ID = os.getenv("GITHUB_OAUTH2_CLIENT_ID", None)
GITHUB_OAUTH2_CLIENT_SECRET = os.getenv("GITHUB_OAUTH2_CLIENT_SECRET", None)

FACEBOOK_OAUTH2_CLIENT_ID = os.getenv("FACEBOOK_OAUTH2_CLIENT_ID", None)
FACEBOOK_OAUTH2_CLIENT_SECRET = os.getenv("FACEBOOK_OAUTH2_CLIENT_SECRET", None)

# Social Auth Settings (for social-auth-app-django)
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = GOOGLE_OAUTH2_CLIENT_ID
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = GOOGLE_OAUTH2_CLIENT_SECRET

SOCIAL_AUTH_GITHUB_KEY = GITHUB_OAUTH2_CLIENT_ID
SOCIAL_AUTH_GITHUB_SECRET = GITHUB_OAUTH2_CLIENT_SECRET

SOCIAL_AUTH_FACEBOOK_KEY = FACEBOOK_OAUTH2_CLIENT_ID
SOCIAL_AUTH_FACEBOOK_SECRET = FACEBOOK_OAUTH2_CLIENT_SECRET

# Social Auth Pipeline (optional customization)
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)
